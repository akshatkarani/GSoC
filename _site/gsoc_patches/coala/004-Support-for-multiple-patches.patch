From bba1cb7a16a958891edfa4a9f422e03767d9ec0f Mon Sep 17 00:00:00 2001
From: akshatkarani <akshatkarani@gmail.com>
Date: Mon, 5 Aug 2019 20:09:57 +0530
Subject: [PATCH] AlternatePatchAction: Support for multiple patches

This adds a new attribute `alternate_diffs` to Result class. It is a
list of dictionaries where each element is an alternate patch suggested
by the bear. Corresponding to each `alternate_diff` an instance of
AlternatePatchAction is added to the list of actions.
---
 coalib/output/ConsoleInteraction.py           |  18 ++
 coalib/results/Result.py                      |  14 +-
 .../result_actions/AlternatePatchAction.py    |  39 +++++
 tests/output/ConsoleInteractionTest.py        |  24 ++-
 .../AlternatePatchActionTest.py               | 165 ++++++++++++++++++
 5 files changed, 256 insertions(+), 4 deletions(-)
 create mode 100644 coalib/results/result_actions/AlternatePatchAction.py
 create mode 100644 tests/results/result_actions/AlternatePatchActionTest.py

diff --git a/coalib/output/ConsoleInteraction.py b/coalib/output/ConsoleInteraction.py
index 34bc88974..071a00ab5 100644
--- a/coalib/output/ConsoleInteraction.py
+++ b/coalib/output/ConsoleInteraction.py
@@ -30,6 +30,8 @@
 from coalib.results.result_actions.PrintMoreInfoAction import (
     PrintMoreInfoAction)
 from coalib.results.result_actions.ShowPatchAction import ShowPatchAction
+from coalib.results.result_actions.AlternatePatchAction import (
+    AlternatePatchAction)
 from coalib.results.RESULT_SEVERITY import (
     RESULT_SEVERITY, RESULT_SEVERITY_COLORS)
 from coalib.settings.Setting import Setting
@@ -144,6 +146,21 @@ def nothing_done(log_printer=None):
                     'do.')
 
 
+def get_alternate_patch_actions(result):
+    """
+    Returns a tuple of AlternatePatchAction instances, each corresponding
+    to an alternate_diff in result.alternate_diffs
+    """
+    alternate_patch_actions = []
+    if result.alternate_diffs is not None:
+        count = 1
+        for alternate_diff in result.alternate_diffs:
+            alternate_patch_actions.append(
+                AlternatePatchAction(alternate_diff, count))
+            count += 1
+    return tuple(alternate_patch_actions)
+
+
 def acquire_actions_and_apply(console_printer,
                               section,
                               file_diff_dict,
@@ -166,6 +183,7 @@ def acquire_actions_and_apply(console_printer,
     :param cli_actions:     The list of cli actions available.
     """
     cli_actions = CLI_ACTIONS if cli_actions is None else cli_actions
+    cli_actions += get_alternate_patch_actions(result)
     failed_actions = set()
     applied_actions = {}
 
diff --git a/coalib/results/Result.py b/coalib/results/Result.py
index 1028d844b..ee60b43d2 100644
--- a/coalib/results/Result.py
+++ b/coalib/results/Result.py
@@ -66,7 +66,8 @@ def __init__(self,
                  aspect: (aspectbase, None) = None,
                  message_arguments: dict = {},
                  applied_actions: dict = {},
-                 actions: list = []):
+                 actions: list = [],
+                 alternate_diffs: (list, None) = None):
         """
         :param origin:
             Class name or creator object of this object.
@@ -102,6 +103,8 @@ def __init__(self,
             the section for an action.
         :param actions:
             A list of action instances specific to the origin of the result.
+        :param alternate_diffs:
+            A list of dictionaries, where each element is an alternative diff.
         :raises ValueError:
             Raised when confidence is not between 0 and 100.
         :raises KeyError:
@@ -135,6 +138,7 @@ def __init__(self,
             self.additional_info = '{} {}'.format(
                 aspect.Docs.importance_reason, aspect.Docs.fix_suggestions)
         self.actions = actions
+        self.alternate_diffs = alternate_diffs
 
     @property
     def message(self):
@@ -169,7 +173,8 @@ def from_values(cls,
                     confidence: int = 100,
                     aspect: (aspectbase, None) = None,
                     message_arguments: dict = {},
-                    actions: list = []):
+                    actions: list = [],
+                    alternate_diffs: (list, None) = None):
         """
         Creates a result with only one SourceRange with the given start and end
         locations.
@@ -216,6 +221,8 @@ def from_values(cls,
             belongs to.)
         :param actions:
             A list of action instances specific to the origin of the result.
+        :param alternate_diffs:
+            A list of dictionaries, where each element is an alternative diff.
         """
         source_range = SourceRange.from_values(file,
                                                line,
@@ -233,7 +240,8 @@ def from_values(cls,
                    confidence=confidence,
                    aspect=aspect,
                    message_arguments=message_arguments,
-                   actions=actions)
+                   actions=actions,
+                   alternate_diffs=alternate_diffs)
 
     def to_string_dict(self):
         """
diff --git a/coalib/results/result_actions/AlternatePatchAction.py b/coalib/results/result_actions/AlternatePatchAction.py
new file mode 100644
index 000000000..c6cd5bb97
--- /dev/null
+++ b/coalib/results/result_actions/AlternatePatchAction.py
@@ -0,0 +1,39 @@
+from coalib.results.Result import Result
+from coalib.results.result_actions.ResultAction import ResultAction
+from coalib.results.result_actions.ShowPatchAction import ShowPatchAction
+
+
+class AlternatePatchAction(ResultAction):
+
+    SUCCESS_MESSAGE = 'Displayed patch successfully.'
+
+    def __init__(self, diffs, count):
+        self.diffs = diffs
+        self.description = 'Show Alternate Patch ' + str(count)
+
+    def is_applicable(self,
+                      result: Result,
+                      original_file_dict,
+                      file_diff_dict,
+                      applied_actions=()):
+        return 'ApplyPatchAction' not in applied_actions
+
+    def apply(self,
+              result,
+              original_file_dict,
+              file_diff_dict,
+              no_color: bool = False):
+        self.diffs, result.diffs = result.diffs, self.diffs
+        self.update_description(result)
+        return ShowPatchAction().apply(result,
+                                       original_file_dict,
+                                       file_diff_dict,
+                                       no_color=no_color)
+
+    def update_description(self, result):
+        alternate_diffs = result.alternate_diffs
+        if self.diffs in alternate_diffs:
+            count = alternate_diffs.index(self.diffs) + 1
+            self.description = 'Show Alternate Patch ' + str(count)
+        else:
+            self.description = 'Show Original Patch'
diff --git a/tests/output/ConsoleInteractionTest.py b/tests/output/ConsoleInteractionTest.py
index ab1a42208..87f2f5cf6 100644
--- a/tests/output/ConsoleInteractionTest.py
+++ b/tests/output/ConsoleInteractionTest.py
@@ -19,7 +19,7 @@
     print_affected_files, print_result, print_results,
     print_results_formatted, print_results_no_input, print_section_beginning,
     show_bear, show_bears, ask_for_action_and_apply, print_diffs_info,
-    show_language_bears_capabilities)
+    show_language_bears_capabilities, get_alternate_patch_actions)
 from coalib.output.ConsoleInteraction import (BackgroundSourceRangeStyle,
                                               BackgroundMessageStyle,
                                               highlight_text)
@@ -381,6 +381,28 @@ def test_print_affected_files(self):
                                  file_dict)
             self.assertEqual(stdout.getvalue(), '\n'+relpath(some_file)+'\n')
 
+    def test_get_alternate_patch_actions(self):
+        result = Result('origin', 'message')
+        retval = get_alternate_patch_actions(result)
+        self.assertEqual(retval, ())
+
+        diffs = {'filename': 'diff1'}
+        alternate_diffs = [{'filename': 'diff 2'},
+                           {'filename': 'diff 3'},
+                           {'filename': 'diff 4'}]
+        result = Result('origin',
+                        'message',
+                        diffs=diffs,
+                        alternate_diffs=alternate_diffs)
+        retval = get_alternate_patch_actions(result)
+        self.assertEqual(len(retval), 3)
+        self.assertEqual(retval[0].diffs, {'filename': 'diff 2'})
+        self.assertEqual(retval[1].diffs, {'filename': 'diff 3'})
+        self.assertEqual(retval[2].diffs, {'filename': 'diff 4'})
+        self.assertEqual(retval[0].description, 'Show Alternate Patch 1')
+        self.assertEqual(retval[1].description, 'Show Alternate Patch 2')
+        self.assertEqual(retval[2].description, 'Show Alternate Patch 3')
+
     def test_acquire_actions_and_apply(self):
         with make_temp() as testfile_path:
             file_dict = {testfile_path: ['1\n', '2\n', '3\n']}
diff --git a/tests/results/result_actions/AlternatePatchActionTest.py b/tests/results/result_actions/AlternatePatchActionTest.py
new file mode 100644
index 000000000..cb84c9028
--- /dev/null
+++ b/tests/results/result_actions/AlternatePatchActionTest.py
@@ -0,0 +1,165 @@
+import unittest
+from coalib.results.Result import Result
+from coalib.results.Diff import Diff
+from coalib.settings.Section import Section, Setting
+from coalib.results.result_actions.AlternatePatchAction import (
+    AlternatePatchAction)
+from coala_utils.ContextManagers import retrieve_stdout
+
+
+class AlternatePatchActionTest(unittest.TestCase):
+
+    def setUp(self):
+        diff0 = Diff(['coler'])
+        diff0.modify_line(1, 'color')
+
+        diff1 = Diff(['coler'])
+        diff1.modify_line(1, 'colour')
+
+        diff2 = Diff(['coler'])
+        diff2.modify_line(1, 'cooler')
+
+        diff3 = Diff(['coler'])
+        diff3.modify_line(1, 'coder')
+
+        self.original_diff = {'filename': diff0}
+        self.alternate_diff1 = {'filename': diff1}
+        self.alternate_diff2 = {'filename': diff2}
+        self.alternate_diff3 = {'filename': diff3}
+        self.alternate_diffs = [self.alternate_diff1,
+                                self.alternate_diff2,
+                                self.alternate_diff3]
+        self.result = Result('origin', 'message',
+                             diffs=self.original_diff,
+                             alternate_diffs=self.alternate_diffs)
+        self.original_file_dict = {'filename': ['coler']}
+        self.section = Section('name')
+        self.section.append(Setting('no_color', 'True'))
+
+        self.uut1 = AlternatePatchAction(self.alternate_diff1, 1)
+        self.uut2 = AlternatePatchAction(self.alternate_diff2, 2)
+        self.uut3 = AlternatePatchAction(self.alternate_diff3, 3)
+
+    def test_is_applicable(self):
+        retval = self.uut1.is_applicable(self.result,
+                                         self.original_file_dict, {},
+                                         applied_actions=('ShowPatchAction'))
+        self.assertTrue(retval)
+
+        retval = self.uut1.is_applicable(self.result,
+                                         self.original_file_dict, {},
+                                         applied_actions=('ShowPatchAction',
+                                                          'ApplyPatchAction'))
+        self.assertFalse(retval)
+
+    def test_apply(self):
+        self.assertEqual(self.uut1.description, 'Show Alternate Patch 1')
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 2')
+        self.assertEqual(self.uut3.description, 'Show Alternate Patch 3')
+
+        with retrieve_stdout() as stdout:
+            self.uut1.apply_from_section(self.result,
+                                         self.original_file_dict,
+                                         {}, self.section)
+            self.assertEqual(stdout.getvalue(),
+                             '[----] filename\n'
+                             '[++++] filename\n'
+                             '[   1] coler\n'
+                             '[   1] colour\n')
+            self.uut1.diffs = self.original_diff
+            self.result.diffs = self.alternate_diff1
+
+        self.assertEqual(self.uut1.description, 'Show Original Patch')
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 2')
+        self.assertEqual(self.uut3.description, 'Show Alternate Patch 3')
+
+        with retrieve_stdout() as stdout:
+            self.uut2.apply_from_section(self.result,
+                                         self.original_file_dict,
+                                         {}, self.section)
+            self.assertEqual(stdout.getvalue(),
+                             '[----] filename\n'
+                             '[++++] filename\n'
+                             '[   1] coler\n'
+                             '[   1] cooler\n')
+            self.uut2.diffs = self.alternate_diff1
+            self.result.diffs = self.alternate_diff2
+
+        self.assertEqual(self.uut1.description, 'Show Original Patch')
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 1')
+        self.assertEqual(self.uut3.description, 'Show Alternate Patch 3')
+
+        with retrieve_stdout() as stdout:
+            self.uut3.apply_from_section(self.result,
+                                         self.original_file_dict,
+                                         {}, self.section)
+            self.assertEqual(stdout.getvalue(),
+                             '[----] filename\n'
+                             '[++++] filename\n'
+                             '[   1] coler\n'
+                             '[   1] coder\n')
+            self.uut3.diffs = self.alternate_diff2
+            self.result.diffs = self.alternate_diff3
+
+        self.assertEqual(self.uut1.description, 'Show Original Patch')
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 1')
+        self.assertEqual(self.uut3.description, 'Show Alternate Patch 2')
+
+        with retrieve_stdout() as stdout:
+            self.uut3.apply_from_section(self.result,
+                                         self.original_file_dict,
+                                         {}, self.section)
+            self.assertEqual(stdout.getvalue(),
+                             '[----] filename\n'
+                             '[++++] filename\n'
+                             '[   1] coler\n'
+                             '[   1] cooler\n')
+            self.uut3.diffs = self.alternate_diff3
+            self.result.diffs = self.alternate_diff2
+
+        self.assertEqual(self.uut1.description, 'Show Original Patch')
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 1')
+        self.assertEqual(self.uut3.description, 'Show Alternate Patch 3')
+
+        with retrieve_stdout() as stdout:
+            self.uut2.apply_from_section(self.result,
+                                         self.original_file_dict,
+                                         {}, self.section)
+            self.assertEqual(stdout.getvalue(),
+                             '[----] filename\n'
+                             '[++++] filename\n'
+                             '[   1] coler\n'
+                             '[   1] colour\n')
+            self.uut2.diffs = self.alternate_diff2
+            self.result.diffs = self.alternate_diff1
+
+        self.assertEqual(self.uut1.description, 'Show Original Patch')
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 2')
+        self.assertEqual(self.uut3.description, 'Show Alternate Patch 3')
+
+        with retrieve_stdout() as stdout:
+            self.uut1.apply_from_section(self.result,
+                                         self.original_file_dict,
+                                         {}, self.section)
+            self.assertEqual(stdout.getvalue(),
+                             '[----] filename\n'
+                             '[++++] filename\n'
+                             '[   1] coler\n'
+                             '[   1] color\n')
+            self.uut1.diffs = self.alternate_diff1
+            self.result.diffs = self.original_diff
+
+        self.assertEqual(self.uut1.description, 'Show Alternate Patch 1')
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 2')
+        self.assertEqual(self.uut3.description, 'Show Alternate Patch 3')
+
+    def test_update_description(self):
+        result = self.result
+        result.diffs, self.uut2.diffs = self.uut2.diffs, result.diffs
+
+        self.uut2.update_description(result)
+        self.assertEqual(self.uut2.description, 'Show Original Patch')
+
+        result.diffs, self.uut2.diffs = self.uut2.diffs, result.diffs
+        self.uut2.update_description(result)
+        self.assertEqual(self.uut2.description, 'Show Alternate Patch 2')
